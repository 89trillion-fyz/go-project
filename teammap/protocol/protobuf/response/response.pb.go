// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: response.proto

package response

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CounterType int32

const (
	CounterType_COUNTER_NONE                     CounterType = 0   // proto3版本中，首成员必须为0，成员不应有相同的值
	CounterType_CURRENCY_COINS                   CounterType = 1   // coin
	CounterType_CURRENCY_GEMS                    CounterType = 2   // gem
	CounterType_CURRENCY_WOODS                   CounterType = 3   // wood
	CounterType_TRAINCAMP_POINT                  CounterType = 4   // 当前训练营阶段
	CounterType_PVP_TROPHY_MAX                   CounterType = 5   // 奖杯之路最大
	CounterType_PVP_TROPHY_NOW                   CounterType = 6   // 奖杯之路当前
	CounterType_PVP_MEDAL                        CounterType = 7   // pvp奖杯数
	CounterType_PVP_RD_COUNT                     CounterType = 8   // pvp 衰减次数
	CounterType_PVP_RD_TIME                      CounterType = 9   // pvp 衰减结束时间
	CounterType_PVP_BASIC_COIN                   CounterType = 10  // PVP奖励基础值
	CounterType_BP_ADVANCE_BOUGHT                CounterType = 11  // 当前赛季bp是否购买
	CounterType_SEASON_ID                        CounterType = 12  // 赛季ID
	CounterType_SEASON_START_TM                  CounterType = 13  // 赛季开启时间
	CounterType_SEASON_ATTACK_END_TM             CounterType = 14  // 赛季战斗日结束时间
	CounterType_SEASON_END_TM                    CounterType = 15  // 赛季结束时间
	CounterType_ISLAND_ID                        CounterType = 16  // 岛ID
	CounterType_WEATHER_ID                       CounterType = 17  // 天气ID
	CounterType_TIMESTAMP                        CounterType = 18  // 时间戳
	CounterType_HUNT_LEVEL                       CounterType = 19  // 赏金关卡序号
	CounterType_HUNT_LEVEL_ID                    CounterType = 20  // 赏金关卡id
	CounterType_HUNT_ROUND                       CounterType = 21  // 赏金轮数
	CounterType_REFRESH_TIME                     CounterType = 22  // 刷新时间
	CounterType_IDLE_TS_COIN                     CounterType = 23  // 离线收益COIN时间戳
	CounterType_IDLE_TS_GEM                      CounterType = 24  // 离线收益GEM时间戳
	CounterType_POINT_RACE_RANK                  CounterType = 25  // 积分赛排名
	CounterType_POINT_RACE_SCORE                 CounterType = 26  // 积分赛积分
	CounterType_POINT_RACE_COUNT                 CounterType = 27  // 积分赛次数
	CounterType_BOAT_UNLOCK                      CounterType = 28  // 船只解锁状态
	CounterType_GROWTH_FOUND_COIN_BOUGHT         CounterType = 29  // 是否购买过金币成长基金
	CounterType_GROWTH_FOUND_GEM_BOUGHT          CounterType = 30  // 是否购买过钻石成长基金
	CounterType_MONTH_CARD_GEM                   CounterType = 31  // 钻石周卡结束时间戳
	CounterType_WEEK_CARD_COIN                   CounterType = 32  // 金币周卡结束时间戳
	CounterType_WEEK_CARD_WOOD                   CounterType = 33  // 木头周卡结束时间戳
	CounterType_WEEK_CARD_TROOP                  CounterType = 34  // 军队周卡结束时间戳
	CounterType_DRAWCARD_NEXT_PRICE              CounterType = 35  // 抽卡：下次价格
	CounterType_LUCKY_COUNT                      CounterType = 36  // 抽卡幸运值
	CounterType_LUCKY_MULTIPLE                   CounterType = 37  // 抽卡幸运倍率
	CounterType_GEM_DRAW_CARD_COUNT              CounterType = 38  // 钻石单次抽卡保底
	CounterType_GEM_DRAW_CARD_TOTAL              CounterType = 39  // 钻石抽卡触发保底值
	CounterType_UNLOCK_HIGH_DRAW_CARD            CounterType = 40  // 是否解锁战场高级抽卡
	CounterType_SPIN_DAY_CNT                     CounterType = 41  // 转盘今日次数
	CounterType_SPIN_PERIOD_CNT                  CounterType = 42  // 转盘阶段次数
	CounterType_SPIN_REWARD_CNT                  CounterType = 43  // 转盘阶段奖励领取情况
	CounterType_FLOP_RESET_COUNT                 CounterType = 44  // 翻牌重置次数
	CounterType_FLOP_CHANGE_CARD                 CounterType = 45  // 翻牌主卡
	CounterType_FLOP_NEXT_PRICE                  CounterType = 46  // 下一次翻卡消耗
	CounterType_TEAMWAR_TEAMSCORE                CounterType = 47  // 公会战公会积分
	CounterType_TEAMWAR_TEAMRANK                 CounterType = 48  // 公会战公会排名
	CounterType_TEAM_WAR_COUNT                   CounterType = 49  // 公会战攻击次数
	CounterType_TEAM_IDLE_TS                     CounterType = 50  // 公会离线收益时间戳
	CounterType_RENAME_COUNT                     CounterType = 51  // 改名次数
	CounterType_PVP_ENEMY_TROPHY                 CounterType = 52  // pvp敌方获得杯数
	CounterType_TEAMWARV1_TEAMSCORE              CounterType = 53  // 公会战公会积分
	CounterType_TEAMWARV1_TEAMRANK               CounterType = 54  // 公会战公会排名
	CounterType_TEAMWARV1_COUNT                  CounterType = 55  // 公会战攻击次数
	CounterType_TEAMWARV1_MATCH                  CounterType = 56  // 公会战宣战公会ID
	CounterType_TEAMWARV1_OTEAMSCORE             CounterType = 57  // 公会战敌方公会积分
	CounterType_TEAMLEAGUE_TEAMSCORE             CounterType = 58  // 公会联赛公会积分
	CounterType_TEAMLEAGUE_TEAMRANK              CounterType = 59  // 公会联赛公会排名
	CounterType_TEAMLEAGUE_COUNT                 CounterType = 60  // 公会联赛攻击次数
	CounterType_TEAMLEAGUE_DISABLE               CounterType = 61  // 公会联赛不能攻击
	CounterType_TEAMCHAMP_TEAMSCORE              CounterType = 62  // 公会巅峰赛公会积分
	CounterType_TEAMCHAMP_TEAMRANK               CounterType = 63  // 公会巅峰赛公会排名
	CounterType_TEAMCHAMP_COUNT                  CounterType = 64  // 公会巅峰赛攻击次数
	CounterType_TEAMCHAMP_DISABLE                CounterType = 65  // 公会巅峰赛不能攻击
	CounterType_TEAMCHAMP_NOENTRY                CounterType = 66  // 公会巅峰赛未晋级
	CounterType_TEAMCHAMP_MATCH                  CounterType = 67  // 公会巅峰赛宣战公会ID
	CounterType_TEAMCHAMP_OTEAMSCORE             CounterType = 68  // 公会巅峰赛宣战公会积分
	CounterType_USER_TEAM_ID                     CounterType = 69  // 公会ID
	CounterType_RECRUIT_HIGH_CNT                 CounterType = 70  //高级招募单抽累计次数
	CounterType_RECRUIT_LEGEND_CNT               CounterType = 71  //传奇招募单抽累计次数
	CounterType_MORALE_CNT                       CounterType = 72  // 士气值
	CounterType_MORALE_CAP                       CounterType = 73  // 士气值容量
	CounterType_MORALE_TIME                      CounterType = 74  // 士气值恢复的时间戳
	CounterType_MORALE_EXPEND                    CounterType = 75  // 士气值消耗
	CounterType_WORKER_CNT                       CounterType = 76  //工人数量
	CounterType_WORKER_EXPIRE                    CounterType = 77  //工人过期时间
	CounterType_BUILD_UP_MIN_COST                CounterType = 78  //工人不足时最低立即升级消耗
	CounterType_BUILD_UP_MIN_ID                  CounterType = 79  //工人不足时最低立即升级ID
	CounterType_WORKER_USE_CNT                   CounterType = 80  // 正在使用的工人数量
	CounterType_CURRENCY_TROOP_MEDAL             CounterType = 81  // medal
	CounterType_BUILD_LACK_WOODS                 CounterType = 82  //建筑升级or新建所缺木材数
	CounterType_GEM_CONVERT_WOOD                 CounterType = 83  //钻石补足木材消耗
	CounterType_CHAMP_BONUS_CNT                  CounterType = 84  // 锦标赛奖励加成次数
	CounterType_CHAMP_NEXT_SEASON_RESET          CounterType = 85  //锦标赛下次重置杯数
	CounterType_CHAMP_LAST_SEASON                CounterType = 86  //锦标赛重置之前赛季
	CounterType_CHAMP_LAST_SEASON_SCORE          CounterType = 87  //锦标赛重置之前杯数
	CounterType_CHAMP_EXTRA_COIN                 CounterType = 88  // 锦标赛额外奖励金币
	CounterType_CHAMP_EXTRA_WOOD                 CounterType = 89  // 锦标赛额外奖励木材
	CounterType_ARENA_STAGE                      CounterType = 90  // PVP段位
	CounterType_LAST_STAGE                       CounterType = 91  // 赛季重置前段位
	CounterType_DEFENSE_COMBATS                  CounterType = 92  // 玩家防御战力
	CounterType_DESTROY_BATTLE_SCORE             CounterType = 93  // 摧毁战斗得分
	CounterType_TIME_BATTLE_SCORE                CounterType = 94  // 时间战斗得分
	CounterType_TROOP_KILL_BATTLE_SCORE          CounterType = 95  // 击杀战斗得分
	CounterType_TROOP_LOST_BATTLE_SCORE          CounterType = 96  // 战损战斗得分
	CounterType_COMBATS_BATTLE_SCORE             CounterType = 97  // 战力战斗得分
	CounterType_TOTAL_BATTLE_SCORE               CounterType = 98  // 总战斗得分
	CounterType_BATTLE_SCORE_LEVEL               CounterType = 99  // 战斗评级
	CounterType_INF_WAR_BATTLE_CNT               CounterType = 102 // 无尽试炼次数
	CounterType_INF_WAR_DAILY_MAX_DAMAGE         CounterType = 103 // 无尽试炼当日最高伤害
	CounterType_INF_WAR_SEASON_TOTAL_DAMAGE      CounterType = 104 // 无尽试炼赛季累计伤害
	CounterType_INF_WAR_STAGE_REWARD             CounterType = 105 // 无尽试炼阶段奖励
	CounterType_INF_WAR_ROOM_STAGE               CounterType = 106 // 无尽试炼房间等级
	CounterType_ARMY_HP_RATIO                    CounterType = 107 // 士兵HP比例
	CounterType_CHAMPION_GIFT_PACK_STAGE         CounterType = 108 // 一条龙礼包状态(冠军礼包)
	CounterType_BP_MODEL_CNT                     CounterType = 109 // battlePass奖章数
	CounterType_ADVANCE_BP_BOUGHT                CounterType = 110 // 当前赛季是否购买新版bp
	CounterType_BP_NORMAL_PROGRESS               CounterType = 111 // 新battlePass 普通 领取进度
	CounterType_BP_ADVANCE_PROGRESS              CounterType = 112 // 新battlePass 高级 领取进度
	CounterType_BP_DIFFICULTY_LEVEL              CounterType = 113 // 新battlePass 奖励等级
	CounterType_TASK_TOTAL_ACT                   CounterType = 114 // 个人任务:任务总活跃度
	CounterType_TASK_STAGE                       CounterType = 115 // 个人任务:阶段
	CounterType_TASK_BOX_CLAIM_CNT               CounterType = 116 // 个人任务:宝箱领取数量
	CounterType_VIP_EXPIRE_TS                    CounterType = 117 // vip过期时间
	CounterType_VIP_AUTO_BATTLE_CNT              CounterType = 118 // vip自动战斗次数
	CounterType_VIP_DAILY_RWD_CLAIM              CounterType = 119 // vip每日奖励领取
	CounterType_VIP_EXPIRE_MAIL_SENT             CounterType = 120 //vip过期邮件发送状态
	CounterType_TEAM_EXP                         CounterType = 121 // 当前经验值
	CounterType_TEAM_LV                          CounterType = 122 // 当前公会等级
	CounterType_TEAM_TASK_BOX_CLAIM_CNT          CounterType = 123 // 公会任务已领取宝箱
	CounterType_TEAM_CUR_LV_EXP                  CounterType = 124 //公会当前等级经验
	CounterType_TEAM_NEXT_LV_EXP                 CounterType = 125 //公会下一等级所需经验
	CounterType_TEAM_NEXT_TASK                   CounterType = 126 //公会任务下一个任务Id
	CounterType_TEAM_NEXT_TASK_PG                CounterType = 127 //公会任务下一个任务进度（主要是赛季任务进度）
	CounterType_PVE_CURRENT_LEVEL_STAR           CounterType = 128 // pve当前关卡星数
	CounterType_PVE_NOW_CHAPTER_STAR             CounterType = 130 // pve当前章节星星
	CounterType_PVE_NOW_CHAPTER_ID               CounterType = 132 //pve中的当前章节ID
	CounterType_PVE_NEXT_LEVEL_ID                CounterType = 133 // pve下一关ID
	CounterType_CHAMP_NEXT_SEASON_STAGE          CounterType = 134 // 下赛季段位
	CounterType_CHAMP_MAX_STAGE                  CounterType = 135 // 历史最高段位
	CounterType_LUCKY_MAX                        CounterType = 136 // 抽卡幸运最大值
	CounterType_PVE_CHAPTER_RWD                  CounterType = 137 //当前章节奖励领取进度
	CounterType_PVE_TARGET_REWARD_LOCK           CounterType = 138 //玩家当日通过章节数
	CounterType_PVE_DAILY_COIN_LIMIT_REACHED_TAG CounterType = 139 //玩家当日金币奖励是否达到上限标识,0-未达到，1-达到
	CounterType_PVE_DAILY_WOOD_LIMIT_REACHED_TAG CounterType = 140 //玩家当日木材奖励是否达到上限标识,0-未达到，1-达到
	CounterType_PVP_LAST_ARENA_COUNT             CounterType = 142 //pvp今日战斗次数
	CounterType_INF_WAR_IS_NEXT_DAY              CounterType = 147 //无尽试炼是否跨天
	CounterType_PVE_NOW_DIFF                     CounterType = 148 //pve当前选择难度
)

// Enum value maps for CounterType.
var (
	CounterType_name = map[int32]string{
		0:   "COUNTER_NONE",
		1:   "CURRENCY_COINS",
		2:   "CURRENCY_GEMS",
		3:   "CURRENCY_WOODS",
		4:   "TRAINCAMP_POINT",
		5:   "PVP_TROPHY_MAX",
		6:   "PVP_TROPHY_NOW",
		7:   "PVP_MEDAL",
		8:   "PVP_RD_COUNT",
		9:   "PVP_RD_TIME",
		10:  "PVP_BASIC_COIN",
		11:  "BP_ADVANCE_BOUGHT",
		12:  "SEASON_ID",
		13:  "SEASON_START_TM",
		14:  "SEASON_ATTACK_END_TM",
		15:  "SEASON_END_TM",
		16:  "ISLAND_ID",
		17:  "WEATHER_ID",
		18:  "TIMESTAMP",
		19:  "HUNT_LEVEL",
		20:  "HUNT_LEVEL_ID",
		21:  "HUNT_ROUND",
		22:  "REFRESH_TIME",
		23:  "IDLE_TS_COIN",
		24:  "IDLE_TS_GEM",
		25:  "POINT_RACE_RANK",
		26:  "POINT_RACE_SCORE",
		27:  "POINT_RACE_COUNT",
		28:  "BOAT_UNLOCK",
		29:  "GROWTH_FOUND_COIN_BOUGHT",
		30:  "GROWTH_FOUND_GEM_BOUGHT",
		31:  "MONTH_CARD_GEM",
		32:  "WEEK_CARD_COIN",
		33:  "WEEK_CARD_WOOD",
		34:  "WEEK_CARD_TROOP",
		35:  "DRAWCARD_NEXT_PRICE",
		36:  "LUCKY_COUNT",
		37:  "LUCKY_MULTIPLE",
		38:  "GEM_DRAW_CARD_COUNT",
		39:  "GEM_DRAW_CARD_TOTAL",
		40:  "UNLOCK_HIGH_DRAW_CARD",
		41:  "SPIN_DAY_CNT",
		42:  "SPIN_PERIOD_CNT",
		43:  "SPIN_REWARD_CNT",
		44:  "FLOP_RESET_COUNT",
		45:  "FLOP_CHANGE_CARD",
		46:  "FLOP_NEXT_PRICE",
		47:  "TEAMWAR_TEAMSCORE",
		48:  "TEAMWAR_TEAMRANK",
		49:  "TEAM_WAR_COUNT",
		50:  "TEAM_IDLE_TS",
		51:  "RENAME_COUNT",
		52:  "PVP_ENEMY_TROPHY",
		53:  "TEAMWARV1_TEAMSCORE",
		54:  "TEAMWARV1_TEAMRANK",
		55:  "TEAMWARV1_COUNT",
		56:  "TEAMWARV1_MATCH",
		57:  "TEAMWARV1_OTEAMSCORE",
		58:  "TEAMLEAGUE_TEAMSCORE",
		59:  "TEAMLEAGUE_TEAMRANK",
		60:  "TEAMLEAGUE_COUNT",
		61:  "TEAMLEAGUE_DISABLE",
		62:  "TEAMCHAMP_TEAMSCORE",
		63:  "TEAMCHAMP_TEAMRANK",
		64:  "TEAMCHAMP_COUNT",
		65:  "TEAMCHAMP_DISABLE",
		66:  "TEAMCHAMP_NOENTRY",
		67:  "TEAMCHAMP_MATCH",
		68:  "TEAMCHAMP_OTEAMSCORE",
		69:  "USER_TEAM_ID",
		70:  "RECRUIT_HIGH_CNT",
		71:  "RECRUIT_LEGEND_CNT",
		72:  "MORALE_CNT",
		73:  "MORALE_CAP",
		74:  "MORALE_TIME",
		75:  "MORALE_EXPEND",
		76:  "WORKER_CNT",
		77:  "WORKER_EXPIRE",
		78:  "BUILD_UP_MIN_COST",
		79:  "BUILD_UP_MIN_ID",
		80:  "WORKER_USE_CNT",
		81:  "CURRENCY_TROOP_MEDAL",
		82:  "BUILD_LACK_WOODS",
		83:  "GEM_CONVERT_WOOD",
		84:  "CHAMP_BONUS_CNT",
		85:  "CHAMP_NEXT_SEASON_RESET",
		86:  "CHAMP_LAST_SEASON",
		87:  "CHAMP_LAST_SEASON_SCORE",
		88:  "CHAMP_EXTRA_COIN",
		89:  "CHAMP_EXTRA_WOOD",
		90:  "ARENA_STAGE",
		91:  "LAST_STAGE",
		92:  "DEFENSE_COMBATS",
		93:  "DESTROY_BATTLE_SCORE",
		94:  "TIME_BATTLE_SCORE",
		95:  "TROOP_KILL_BATTLE_SCORE",
		96:  "TROOP_LOST_BATTLE_SCORE",
		97:  "COMBATS_BATTLE_SCORE",
		98:  "TOTAL_BATTLE_SCORE",
		99:  "BATTLE_SCORE_LEVEL",
		102: "INF_WAR_BATTLE_CNT",
		103: "INF_WAR_DAILY_MAX_DAMAGE",
		104: "INF_WAR_SEASON_TOTAL_DAMAGE",
		105: "INF_WAR_STAGE_REWARD",
		106: "INF_WAR_ROOM_STAGE",
		107: "ARMY_HP_RATIO",
		108: "CHAMPION_GIFT_PACK_STAGE",
		109: "BP_MODEL_CNT",
		110: "ADVANCE_BP_BOUGHT",
		111: "BP_NORMAL_PROGRESS",
		112: "BP_ADVANCE_PROGRESS",
		113: "BP_DIFFICULTY_LEVEL",
		114: "TASK_TOTAL_ACT",
		115: "TASK_STAGE",
		116: "TASK_BOX_CLAIM_CNT",
		117: "VIP_EXPIRE_TS",
		118: "VIP_AUTO_BATTLE_CNT",
		119: "VIP_DAILY_RWD_CLAIM",
		120: "VIP_EXPIRE_MAIL_SENT",
		121: "TEAM_EXP",
		122: "TEAM_LV",
		123: "TEAM_TASK_BOX_CLAIM_CNT",
		124: "TEAM_CUR_LV_EXP",
		125: "TEAM_NEXT_LV_EXP",
		126: "TEAM_NEXT_TASK",
		127: "TEAM_NEXT_TASK_PG",
		128: "PVE_CURRENT_LEVEL_STAR",
		130: "PVE_NOW_CHAPTER_STAR",
		132: "PVE_NOW_CHAPTER_ID",
		133: "PVE_NEXT_LEVEL_ID",
		134: "CHAMP_NEXT_SEASON_STAGE",
		135: "CHAMP_MAX_STAGE",
		136: "LUCKY_MAX",
		137: "PVE_CHAPTER_RWD",
		138: "PVE_TARGET_REWARD_LOCK",
		139: "PVE_DAILY_COIN_LIMIT_REACHED_TAG",
		140: "PVE_DAILY_WOOD_LIMIT_REACHED_TAG",
		142: "PVP_LAST_ARENA_COUNT",
		147: "INF_WAR_IS_NEXT_DAY",
		148: "PVE_NOW_DIFF",
	}
	CounterType_value = map[string]int32{
		"COUNTER_NONE":                     0,
		"CURRENCY_COINS":                   1,
		"CURRENCY_GEMS":                    2,
		"CURRENCY_WOODS":                   3,
		"TRAINCAMP_POINT":                  4,
		"PVP_TROPHY_MAX":                   5,
		"PVP_TROPHY_NOW":                   6,
		"PVP_MEDAL":                        7,
		"PVP_RD_COUNT":                     8,
		"PVP_RD_TIME":                      9,
		"PVP_BASIC_COIN":                   10,
		"BP_ADVANCE_BOUGHT":                11,
		"SEASON_ID":                        12,
		"SEASON_START_TM":                  13,
		"SEASON_ATTACK_END_TM":             14,
		"SEASON_END_TM":                    15,
		"ISLAND_ID":                        16,
		"WEATHER_ID":                       17,
		"TIMESTAMP":                        18,
		"HUNT_LEVEL":                       19,
		"HUNT_LEVEL_ID":                    20,
		"HUNT_ROUND":                       21,
		"REFRESH_TIME":                     22,
		"IDLE_TS_COIN":                     23,
		"IDLE_TS_GEM":                      24,
		"POINT_RACE_RANK":                  25,
		"POINT_RACE_SCORE":                 26,
		"POINT_RACE_COUNT":                 27,
		"BOAT_UNLOCK":                      28,
		"GROWTH_FOUND_COIN_BOUGHT":         29,
		"GROWTH_FOUND_GEM_BOUGHT":          30,
		"MONTH_CARD_GEM":                   31,
		"WEEK_CARD_COIN":                   32,
		"WEEK_CARD_WOOD":                   33,
		"WEEK_CARD_TROOP":                  34,
		"DRAWCARD_NEXT_PRICE":              35,
		"LUCKY_COUNT":                      36,
		"LUCKY_MULTIPLE":                   37,
		"GEM_DRAW_CARD_COUNT":              38,
		"GEM_DRAW_CARD_TOTAL":              39,
		"UNLOCK_HIGH_DRAW_CARD":            40,
		"SPIN_DAY_CNT":                     41,
		"SPIN_PERIOD_CNT":                  42,
		"SPIN_REWARD_CNT":                  43,
		"FLOP_RESET_COUNT":                 44,
		"FLOP_CHANGE_CARD":                 45,
		"FLOP_NEXT_PRICE":                  46,
		"TEAMWAR_TEAMSCORE":                47,
		"TEAMWAR_TEAMRANK":                 48,
		"TEAM_WAR_COUNT":                   49,
		"TEAM_IDLE_TS":                     50,
		"RENAME_COUNT":                     51,
		"PVP_ENEMY_TROPHY":                 52,
		"TEAMWARV1_TEAMSCORE":              53,
		"TEAMWARV1_TEAMRANK":               54,
		"TEAMWARV1_COUNT":                  55,
		"TEAMWARV1_MATCH":                  56,
		"TEAMWARV1_OTEAMSCORE":             57,
		"TEAMLEAGUE_TEAMSCORE":             58,
		"TEAMLEAGUE_TEAMRANK":              59,
		"TEAMLEAGUE_COUNT":                 60,
		"TEAMLEAGUE_DISABLE":               61,
		"TEAMCHAMP_TEAMSCORE":              62,
		"TEAMCHAMP_TEAMRANK":               63,
		"TEAMCHAMP_COUNT":                  64,
		"TEAMCHAMP_DISABLE":                65,
		"TEAMCHAMP_NOENTRY":                66,
		"TEAMCHAMP_MATCH":                  67,
		"TEAMCHAMP_OTEAMSCORE":             68,
		"USER_TEAM_ID":                     69,
		"RECRUIT_HIGH_CNT":                 70,
		"RECRUIT_LEGEND_CNT":               71,
		"MORALE_CNT":                       72,
		"MORALE_CAP":                       73,
		"MORALE_TIME":                      74,
		"MORALE_EXPEND":                    75,
		"WORKER_CNT":                       76,
		"WORKER_EXPIRE":                    77,
		"BUILD_UP_MIN_COST":                78,
		"BUILD_UP_MIN_ID":                  79,
		"WORKER_USE_CNT":                   80,
		"CURRENCY_TROOP_MEDAL":             81,
		"BUILD_LACK_WOODS":                 82,
		"GEM_CONVERT_WOOD":                 83,
		"CHAMP_BONUS_CNT":                  84,
		"CHAMP_NEXT_SEASON_RESET":          85,
		"CHAMP_LAST_SEASON":                86,
		"CHAMP_LAST_SEASON_SCORE":          87,
		"CHAMP_EXTRA_COIN":                 88,
		"CHAMP_EXTRA_WOOD":                 89,
		"ARENA_STAGE":                      90,
		"LAST_STAGE":                       91,
		"DEFENSE_COMBATS":                  92,
		"DESTROY_BATTLE_SCORE":             93,
		"TIME_BATTLE_SCORE":                94,
		"TROOP_KILL_BATTLE_SCORE":          95,
		"TROOP_LOST_BATTLE_SCORE":          96,
		"COMBATS_BATTLE_SCORE":             97,
		"TOTAL_BATTLE_SCORE":               98,
		"BATTLE_SCORE_LEVEL":               99,
		"INF_WAR_BATTLE_CNT":               102,
		"INF_WAR_DAILY_MAX_DAMAGE":         103,
		"INF_WAR_SEASON_TOTAL_DAMAGE":      104,
		"INF_WAR_STAGE_REWARD":             105,
		"INF_WAR_ROOM_STAGE":               106,
		"ARMY_HP_RATIO":                    107,
		"CHAMPION_GIFT_PACK_STAGE":         108,
		"BP_MODEL_CNT":                     109,
		"ADVANCE_BP_BOUGHT":                110,
		"BP_NORMAL_PROGRESS":               111,
		"BP_ADVANCE_PROGRESS":              112,
		"BP_DIFFICULTY_LEVEL":              113,
		"TASK_TOTAL_ACT":                   114,
		"TASK_STAGE":                       115,
		"TASK_BOX_CLAIM_CNT":               116,
		"VIP_EXPIRE_TS":                    117,
		"VIP_AUTO_BATTLE_CNT":              118,
		"VIP_DAILY_RWD_CLAIM":              119,
		"VIP_EXPIRE_MAIL_SENT":             120,
		"TEAM_EXP":                         121,
		"TEAM_LV":                          122,
		"TEAM_TASK_BOX_CLAIM_CNT":          123,
		"TEAM_CUR_LV_EXP":                  124,
		"TEAM_NEXT_LV_EXP":                 125,
		"TEAM_NEXT_TASK":                   126,
		"TEAM_NEXT_TASK_PG":                127,
		"PVE_CURRENT_LEVEL_STAR":           128,
		"PVE_NOW_CHAPTER_STAR":             130,
		"PVE_NOW_CHAPTER_ID":               132,
		"PVE_NEXT_LEVEL_ID":                133,
		"CHAMP_NEXT_SEASON_STAGE":          134,
		"CHAMP_MAX_STAGE":                  135,
		"LUCKY_MAX":                        136,
		"PVE_CHAPTER_RWD":                  137,
		"PVE_TARGET_REWARD_LOCK":           138,
		"PVE_DAILY_COIN_LIMIT_REACHED_TAG": 139,
		"PVE_DAILY_WOOD_LIMIT_REACHED_TAG": 140,
		"PVP_LAST_ARENA_COUNT":             142,
		"INF_WAR_IS_NEXT_DAY":              147,
		"PVE_NOW_DIFF":                     148,
	}
)

func (x CounterType) Enum() *CounterType {
	p := new(CounterType)
	*p = x
	return p
}

func (x CounterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CounterType) Descriptor() protoreflect.EnumDescriptor {
	return file_response_proto_enumTypes[0].Descriptor()
}

func (CounterType) Type() protoreflect.EnumType {
	return &file_response_proto_enumTypes[0]
}

func (x CounterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CounterType.Descriptor instead.
func (CounterType) EnumDescriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{0}
}

type StateType int32

const (
	StateType_STATE_NONE              StateType = 0 // proto3版本中，首成员必须为0，成员不应有相同的值
	StateType_PVP_BP_NORMAL_CLAIM     StateType = 1 // battle pass 普通 领取和状态
	StateType_PVP_BP_ADVANCE_CLAIM    StateType = 2 // battle pass 高级 领取状态
	StateType_PVP_TROPHY_ROAD_CLAIM   StateType = 3 // 奖杯之路 领取状态
	StateType_USER_SIMPLE_GUIDE_STATE StateType = 4 // 引导状态、改名状态、兵营解锁等
	StateType_LAY_DEF_STATE           StateType = 5
	StateType_LAY_ATK_STATE           StateType = 6
	StateType_LAY_WALL_STATE          StateType = 7
	StateType_ALL_ARMY_STATE          StateType = 8
	StateType_BD_LEVEL_STATE          StateType = 9
	StateType_BD_TIME_STATE           StateType = 10
	StateType_ELITE_POINTRACE         StateType = 11
	StateType_MASTER_POINTRACE        StateType = 12
	StateType_ATTACK_REWARD           StateType = 13
	StateType_LUCKY_DRAW_CARD         StateType = 14 // 幸运抽卡价钱
	StateType_LUCKY_DRAW_CARD_CNT     StateType = 15 // 幸运抽卡数量
	StateType_FLOP_OPEN_RESULT        StateType = 16 // 翻牌翻卡结果
	StateType_SHOP_MONTH_CARD         StateType = 17 // 周卡月卡今日领取状态
	StateType_GROWTH_FOUND_STATE      StateType = 18 // 两种种成长基金领取状态
	StateType_FUSE_WISH_LIST          StateType = 19 // 熔炉许愿池
	StateType_HERO_LV_STATE           StateType = 20 //英雄等级和星级
	StateType_HERO_SKILL_STATE        StateType = 21 //	英雄技能
	StateType_HERO_LAY_STATE          StateType = 22 //	英雄防守阵型
	//20-25为英雄相关预留
	StateType_BAG_TOOL_STATE         StateType = 26 //背包里的道具
	StateType_HERO_SCRAP_STATE       StateType = 27 //英雄碎片
	StateType_CHAMP_ROAD_CLAIM       StateType = 30 // 锦标赛奖杯之路领取状态
	StateType_WORKER_INFO            StateType = 31 // 工人信息
	StateType_DAILY_TASK_PROGRESS    StateType = 32 // 个人任务:任务进度
	StateType_DAILY_TASK_CLAIM_STATE StateType = 33 // 个人任务:是否领取过奖励
	StateType_TEAM_TASK_PROGRESS     StateType = 34 // 公会任务:任务进度
	StateType_TEAM_TASK_CLAIM_STATE  StateType = 35 // 公会任务:是否领取过奖励
	StateType_PVE_CHECKPOINT_STATE   StateType = 36 //pve中当前章节每个关卡的完成状况
	StateType_PVE_CHECKPOINT_INDEX   StateType = 37
	StateType_PVE_CHECKPOINT_USERID  StateType = 38
	StateType_PVE_CHECKPOINT_ISLAND  StateType = 39
	StateType_PVE_CHECKPOINT_CBT     StateType = 40
	StateType_PVE_CHECKPOINT_LAYOUT  StateType = 41
	StateType_PVE_CHECKPOINT_WALL    StateType = 42
	StateType_PVE_CHECKPOINT_BDLV    StateType = 43
	StateType_PVE_CHECKPOINT_REWARD  StateType = 44
)

// Enum value maps for StateType.
var (
	StateType_name = map[int32]string{
		0:  "STATE_NONE",
		1:  "PVP_BP_NORMAL_CLAIM",
		2:  "PVP_BP_ADVANCE_CLAIM",
		3:  "PVP_TROPHY_ROAD_CLAIM",
		4:  "USER_SIMPLE_GUIDE_STATE",
		5:  "LAY_DEF_STATE",
		6:  "LAY_ATK_STATE",
		7:  "LAY_WALL_STATE",
		8:  "ALL_ARMY_STATE",
		9:  "BD_LEVEL_STATE",
		10: "BD_TIME_STATE",
		11: "ELITE_POINTRACE",
		12: "MASTER_POINTRACE",
		13: "ATTACK_REWARD",
		14: "LUCKY_DRAW_CARD",
		15: "LUCKY_DRAW_CARD_CNT",
		16: "FLOP_OPEN_RESULT",
		17: "SHOP_MONTH_CARD",
		18: "GROWTH_FOUND_STATE",
		19: "FUSE_WISH_LIST",
		20: "HERO_LV_STATE",
		21: "HERO_SKILL_STATE",
		22: "HERO_LAY_STATE",
		26: "BAG_TOOL_STATE",
		27: "HERO_SCRAP_STATE",
		30: "CHAMP_ROAD_CLAIM",
		31: "WORKER_INFO",
		32: "DAILY_TASK_PROGRESS",
		33: "DAILY_TASK_CLAIM_STATE",
		34: "TEAM_TASK_PROGRESS",
		35: "TEAM_TASK_CLAIM_STATE",
		36: "PVE_CHECKPOINT_STATE",
		37: "PVE_CHECKPOINT_INDEX",
		38: "PVE_CHECKPOINT_USERID",
		39: "PVE_CHECKPOINT_ISLAND",
		40: "PVE_CHECKPOINT_CBT",
		41: "PVE_CHECKPOINT_LAYOUT",
		42: "PVE_CHECKPOINT_WALL",
		43: "PVE_CHECKPOINT_BDLV",
		44: "PVE_CHECKPOINT_REWARD",
	}
	StateType_value = map[string]int32{
		"STATE_NONE":              0,
		"PVP_BP_NORMAL_CLAIM":     1,
		"PVP_BP_ADVANCE_CLAIM":    2,
		"PVP_TROPHY_ROAD_CLAIM":   3,
		"USER_SIMPLE_GUIDE_STATE": 4,
		"LAY_DEF_STATE":           5,
		"LAY_ATK_STATE":           6,
		"LAY_WALL_STATE":          7,
		"ALL_ARMY_STATE":          8,
		"BD_LEVEL_STATE":          9,
		"BD_TIME_STATE":           10,
		"ELITE_POINTRACE":         11,
		"MASTER_POINTRACE":        12,
		"ATTACK_REWARD":           13,
		"LUCKY_DRAW_CARD":         14,
		"LUCKY_DRAW_CARD_CNT":     15,
		"FLOP_OPEN_RESULT":        16,
		"SHOP_MONTH_CARD":         17,
		"GROWTH_FOUND_STATE":      18,
		"FUSE_WISH_LIST":          19,
		"HERO_LV_STATE":           20,
		"HERO_SKILL_STATE":        21,
		"HERO_LAY_STATE":          22,
		"BAG_TOOL_STATE":          26,
		"HERO_SCRAP_STATE":        27,
		"CHAMP_ROAD_CLAIM":        30,
		"WORKER_INFO":             31,
		"DAILY_TASK_PROGRESS":     32,
		"DAILY_TASK_CLAIM_STATE":  33,
		"TEAM_TASK_PROGRESS":      34,
		"TEAM_TASK_CLAIM_STATE":   35,
		"PVE_CHECKPOINT_STATE":    36,
		"PVE_CHECKPOINT_INDEX":    37,
		"PVE_CHECKPOINT_USERID":   38,
		"PVE_CHECKPOINT_ISLAND":   39,
		"PVE_CHECKPOINT_CBT":      40,
		"PVE_CHECKPOINT_LAYOUT":   41,
		"PVE_CHECKPOINT_WALL":     42,
		"PVE_CHECKPOINT_BDLV":     43,
		"PVE_CHECKPOINT_REWARD":   44,
	}
)

func (x StateType) Enum() *StateType {
	p := new(StateType)
	*p = x
	return p
}

func (x StateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StateType) Descriptor() protoreflect.EnumDescriptor {
	return file_response_proto_enumTypes[1].Descriptor()
}

func (StateType) Type() protoreflect.EnumType {
	return &file_response_proto_enumTypes[1]
}

func (x StateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StateType.Descriptor instead.
func (StateType) EnumDescriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{1}
}

// 通用的响应结构，状态码和状态信息
type General struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *General) Reset() {
	*x = General{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *General) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*General) ProtoMessage() {}

func (x *General) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use General.ProtoReflect.Descriptor instead.
func (*General) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{0}
}

func (x *General) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *General) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 通用奖励消息
type GeneralReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg     string            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Changes []*PerChange      `protobuf:"bytes,3,rep,name=changes,proto3" json:"changes,omitempty"`                                                                                           // 客户端展示奖励的部分，严格按顺序展示 :每个结构体是道具ID -> 道具数量
	Balance map[uint32]uint64 `protobuf:"bytes,4,rep,name=balance,proto3" json:"balance,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 道具有变化部分的当前余额 :  道具ID -> 道具数量
	Counter map[uint32]uint64 `protobuf:"bytes,5,rep,name=counter,proto3" json:"counter,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 计数器当前值 : counterType -> 计数
	Ext     string            `protobuf:"bytes,6,opt,name=ext,proto3" json:"ext,omitempty"`                                                                                                   // 扩展字段，IAP使用
}

func (x *GeneralReward) Reset() {
	*x = GeneralReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralReward) ProtoMessage() {}

func (x *GeneralReward) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralReward.ProtoReflect.Descriptor instead.
func (*GeneralReward) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{1}
}

func (x *GeneralReward) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GeneralReward) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GeneralReward) GetChanges() []*PerChange {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *GeneralReward) GetBalance() map[uint32]uint64 {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *GeneralReward) GetCounter() map[uint32]uint64 {
	if x != nil {
		return x.Counter
	}
	return nil
}

func (x *GeneralReward) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

// 通用状态消息
type GeneralState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg     string            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Counter map[uint32]uint64 `protobuf:"bytes,3,rep,name=counter,proto3" json:"counter,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 计数器当前值：counterType -> 计数
	State   []*StateDetail    `protobuf:"bytes,4,rep,name=state,proto3" json:"state,omitempty"`                                                                                               // 当前状态：宝箱奖励、战令奖励等
	Ext     string            `protobuf:"bytes,5,opt,name=ext,proto3" json:"ext,omitempty"`                                                                                                   // 扩展字符串，请求ID等
}

func (x *GeneralState) Reset() {
	*x = GeneralState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralState) ProtoMessage() {}

func (x *GeneralState) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralState.ProtoReflect.Descriptor instead.
func (*GeneralState) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{2}
}

func (x *GeneralState) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GeneralState) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GeneralState) GetCounter() map[uint32]uint64 {
	if x != nil {
		return x.Counter
	}
	return nil
}

func (x *GeneralState) GetState() []*StateDetail {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *GeneralState) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

type PerChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JoinId uint32 `protobuf:"varint,1,opt,name=joinId,proto3" json:"joinId,omitempty"` //获得的物品id，eg：1010102 1级士兵
	Amount int32  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"` //获得的物品数量
}

func (x *PerChange) Reset() {
	*x = PerChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerChange) ProtoMessage() {}

func (x *PerChange) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerChange.ProtoReflect.Descriptor instead.
func (*PerChange) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{3}
}

func (x *PerChange) GetJoinId() uint32 {
	if x != nil {
		return x.JoinId
	}
	return 0
}

func (x *PerChange) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// 通用阵型消息消息
type GeneralLayout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg        string            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	BdInf      *BdInformation    `protobuf:"bytes,8,opt,name=bdInf,proto3" json:"bdInf,omitempty"`
	ChangedPos *SyncPos          `protobuf:"bytes,9,opt,name=changedPos,proto3" json:"changedPos,omitempty"`
	Ext        []uint32          `protobuf:"varint,10,rep,packed,name=ext,proto3" json:"ext,omitempty"`
	Balance    map[uint32]uint64 `protobuf:"bytes,11,rep,name=balance,proto3" json:"balance,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 道具有变化部分的当前余额 :  道具ID -> 道具数量
	HeroInf    *HeroInformation  `protobuf:"bytes,12,opt,name=heroInf,proto3" json:"heroInf,omitempty"`
	Counter    map[uint32]uint64 `protobuf:"bytes,13,rep,name=counter,proto3" json:"counter,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // worker数量、消耗钻石、army camp升级重置士气值
	State      []*StateDetail    `protobuf:"bytes,14,rep,name=state,proto3" json:"state,omitempty"`                                                                                               // 当前状态
}

func (x *GeneralLayout) Reset() {
	*x = GeneralLayout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralLayout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralLayout) ProtoMessage() {}

func (x *GeneralLayout) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralLayout.ProtoReflect.Descriptor instead.
func (*GeneralLayout) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{4}
}

func (x *GeneralLayout) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GeneralLayout) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GeneralLayout) GetBdInf() *BdInformation {
	if x != nil {
		return x.BdInf
	}
	return nil
}

func (x *GeneralLayout) GetChangedPos() *SyncPos {
	if x != nil {
		return x.ChangedPos
	}
	return nil
}

func (x *GeneralLayout) GetExt() []uint32 {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *GeneralLayout) GetBalance() map[uint32]uint64 {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *GeneralLayout) GetHeroInf() *HeroInformation {
	if x != nil {
		return x.HeroInf
	}
	return nil
}

func (x *GeneralLayout) GetCounter() map[uint32]uint64 {
	if x != nil {
		return x.Counter
	}
	return nil
}

func (x *GeneralLayout) GetState() []*StateDetail {
	if x != nil {
		return x.State
	}
	return nil
}

type BdInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bdid   uint32 `protobuf:"varint,1,opt,name=bdid,proto3" json:"bdid,omitempty"`
	BdLv   uint32 `protobuf:"varint,2,opt,name=bdLv,proto3" json:"bdLv,omitempty"`
	BdEndT uint32 `protobuf:"varint,3,opt,name=bdEndT,proto3" json:"bdEndT,omitempty"`
}

func (x *BdInformation) Reset() {
	*x = BdInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BdInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BdInformation) ProtoMessage() {}

func (x *BdInformation) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BdInformation.ProtoReflect.Descriptor instead.
func (*BdInformation) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{5}
}

func (x *BdInformation) GetBdid() uint32 {
	if x != nil {
		return x.Bdid
	}
	return 0
}

func (x *BdInformation) GetBdLv() uint32 {
	if x != nil {
		return x.BdLv
	}
	return 0
}

func (x *BdInformation) GetBdEndT() uint32 {
	if x != nil {
		return x.BdEndT
	}
	return 0
}

type HeroInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  uint32 `protobuf:"varint,1,opt,name=name,proto3" json:"name,omitempty"`
	Star  uint32 `protobuf:"varint,2,opt,name=star,proto3" json:"star,omitempty"`
	Level uint32 `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Skill uint32 `protobuf:"varint,4,opt,name=skill,proto3" json:"skill,omitempty"`
}

func (x *HeroInformation) Reset() {
	*x = HeroInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeroInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeroInformation) ProtoMessage() {}

func (x *HeroInformation) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeroInformation.ProtoReflect.Descriptor instead.
func (*HeroInformation) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{6}
}

func (x *HeroInformation) GetName() uint32 {
	if x != nil {
		return x.Name
	}
	return 0
}

func (x *HeroInformation) GetStar() uint32 {
	if x != nil {
		return x.Star
	}
	return 0
}

func (x *HeroInformation) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *HeroInformation) GetSkill() uint32 {
	if x != nil {
		return x.Skill
	}
	return 0
}

type SyncPos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncType uint32           `protobuf:"varint,1,opt,name=syncType,proto3" json:"syncType,omitempty"`                                                                                      //改变的阵型
	NewPos   map[int32]uint32 `protobuf:"bytes,2,rep,name=newPos,proto3" json:"newPos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //pos->id
}

func (x *SyncPos) Reset() {
	*x = SyncPos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncPos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncPos) ProtoMessage() {}

func (x *SyncPos) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncPos.ProtoReflect.Descriptor instead.
func (*SyncPos) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{7}
}

func (x *SyncPos) GetSyncType() uint32 {
	if x != nil {
		return x.SyncType
	}
	return 0
}

func (x *SyncPos) GetNewPos() map[int32]uint32 {
	if x != nil {
		return x.NewPos
	}
	return nil
}

// 状态详情，子表
type StateDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  StateType        `protobuf:"varint,1,opt,name=type,proto3,enum=response.StateType" json:"type,omitempty"`                                                                    // 类型 : 转盘额外奖励、pvp 战令 等
	State map[int32]uint32 `protobuf:"bytes,2,rep,name=state,proto3" json:"state,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 状态内容： id -> state，例如 转盘额外宝箱 5 -> 1 (claimed), 25 -> 0 (未claim)
}

func (x *StateDetail) Reset() {
	*x = StateDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_response_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateDetail) ProtoMessage() {}

func (x *StateDetail) ProtoReflect() protoreflect.Message {
	mi := &file_response_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateDetail.ProtoReflect.Descriptor instead.
func (*StateDetail) Descriptor() ([]byte, []int) {
	return file_response_proto_rawDescGZIP(), []int{8}
}

func (x *StateDetail) GetType() StateType {
	if x != nil {
		return x.Type
	}
	return StateType_STATE_NONE
}

func (x *StateDetail) GetState() map[int32]uint32 {
	if x != nil {
		return x.State
	}
	return nil
}

var File_response_proto protoreflect.FileDescriptor

var file_response_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x0a, 0x07, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xee, 0x02, 0x0a, 0x0d,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x50, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x65, 0x78, 0x74, 0x1a, 0x3a, 0x0a, 0x0c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xee, 0x01, 0x0a,
	0x0c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78,
	0x74, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3b, 0x0a,
	0x09, 0x50, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x6f,
	0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6a, 0x6f, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x83, 0x04, 0x0a, 0x0d, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x2d, 0x0a, 0x05, 0x62, 0x64, 0x49, 0x6e, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x62, 0x64, 0x49, 0x6e,
	0x66, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x6f, 0x73, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x50, 0x6f, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x6e,
	0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x6e, 0x66, 0x12, 0x3e, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x4f, 0x0a, 0x0d, 0x42, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x62, 0x64, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x64, 0x4c, 0x76, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x64, 0x4c, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x64, 0x45,
	0x6e, 0x64, 0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x64, 0x45, 0x6e, 0x64,
	0x54, 0x22, 0x65, 0x0a, 0x0f, 0x48, 0x65, 0x72, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x22, 0x97, 0x01, 0x0a, 0x07, 0x53, 0x79, 0x6e,
	0x63, 0x50, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x35, 0x0a, 0x06, 0x6e, 0x65, 0x77, 0x50, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x79, 0x6e, 0x63,
	0x50, 0x6f, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x6e, 0x65, 0x77, 0x50, 0x6f, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x50, 0x6f,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xa8, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0xab, 0x18,
	0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43, 0x4f, 0x49, 0x4e,
	0x53, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f,
	0x47, 0x45, 0x4d, 0x53, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x57, 0x4f, 0x4f, 0x44, 0x53, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52,
	0x41, 0x49, 0x4e, 0x43, 0x41, 0x4d, 0x50, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x04, 0x12,
	0x12, 0x0a, 0x0e, 0x50, 0x56, 0x50, 0x5f, 0x54, 0x52, 0x4f, 0x50, 0x48, 0x59, 0x5f, 0x4d, 0x41,
	0x58, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x56, 0x50, 0x5f, 0x54, 0x52, 0x4f, 0x50, 0x48,
	0x59, 0x5f, 0x4e, 0x4f, 0x57, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x56, 0x50, 0x5f, 0x4d,
	0x45, 0x44, 0x41, 0x4c, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x56, 0x50, 0x5f, 0x52, 0x44,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x56, 0x50, 0x5f,
	0x52, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x56, 0x50,
	0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x0a, 0x12, 0x15, 0x0a,
	0x11, 0x42, 0x50, 0x5f, 0x41, 0x44, 0x56, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x42, 0x4f, 0x55, 0x47,
	0x48, 0x54, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x54, 0x4d, 0x10, 0x0d, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x4d,
	0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x44,
	0x5f, 0x54, 0x4d, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x53, 0x4c, 0x41, 0x4e, 0x44, 0x5f,
	0x49, 0x44, 0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x5f,
	0x49, 0x44, 0x10, 0x11, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d,
	0x50, 0x10, 0x12, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x55, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x10, 0x13, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x55, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x49, 0x44, 0x10, 0x14, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x55, 0x4e, 0x54, 0x5f, 0x52,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x15, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53,
	0x48, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x16, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x44, 0x4c, 0x45,
	0x5f, 0x54, 0x53, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x17, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x44,
	0x4c, 0x45, 0x5f, 0x54, 0x53, 0x5f, 0x47, 0x45, 0x4d, 0x10, 0x18, 0x12, 0x13, 0x0a, 0x0f, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x19,
	0x12, 0x14, 0x0a, 0x10, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x53,
	0x43, 0x4f, 0x52, 0x45, 0x10, 0x1a, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f,
	0x52, 0x41, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x1b, 0x12, 0x0f, 0x0a, 0x0b,
	0x42, 0x4f, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x1c, 0x12, 0x1c, 0x0a,
	0x18, 0x47, 0x52, 0x4f, 0x57, 0x54, 0x48, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x43, 0x4f,
	0x49, 0x4e, 0x5f, 0x42, 0x4f, 0x55, 0x47, 0x48, 0x54, 0x10, 0x1d, 0x12, 0x1b, 0x0a, 0x17, 0x47,
	0x52, 0x4f, 0x57, 0x54, 0x48, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x47, 0x45, 0x4d, 0x5f,
	0x42, 0x4f, 0x55, 0x47, 0x48, 0x54, 0x10, 0x1e, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x4f, 0x4e, 0x54,
	0x48, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x47, 0x45, 0x4d, 0x10, 0x1f, 0x12, 0x12, 0x0a, 0x0e,
	0x57, 0x45, 0x45, 0x4b, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x20,
	0x12, 0x12, 0x0a, 0x0e, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x57, 0x4f,
	0x4f, 0x44, 0x10, 0x21, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x43, 0x41, 0x52,
	0x44, 0x5f, 0x54, 0x52, 0x4f, 0x4f, 0x50, 0x10, 0x22, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x52, 0x41,
	0x57, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45,
	0x10, 0x23, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x55, 0x43, 0x4b, 0x59, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x24, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x55, 0x43, 0x4b, 0x59, 0x5f, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x50, 0x4c, 0x45, 0x10, 0x25, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x45, 0x4d, 0x5f, 0x44,
	0x52, 0x41, 0x57, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x26,
	0x12, 0x17, 0x0a, 0x13, 0x47, 0x45, 0x4d, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x43, 0x41, 0x52,
	0x44, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0x27, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e, 0x4c,
	0x4f, 0x43, 0x4b, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x10, 0x28, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x50, 0x49, 0x4e, 0x5f, 0x44, 0x41, 0x59,
	0x5f, 0x43, 0x4e, 0x54, 0x10, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x50, 0x49, 0x4e, 0x5f, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x2a, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x50, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x2b,
	0x12, 0x14, 0x0a, 0x10, 0x46, 0x4c, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x2c, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x4c, 0x4f, 0x50, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x2d, 0x12, 0x13, 0x0a, 0x0f,
	0x46, 0x4c, 0x4f, 0x50, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10,
	0x2e, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x45, 0x41, 0x4d, 0x57, 0x41, 0x52, 0x5f, 0x54, 0x45, 0x41,
	0x4d, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x2f, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x45, 0x41, 0x4d,
	0x57, 0x41, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x30, 0x12, 0x12,
	0x0a, 0x0e, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x57, 0x41, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0x31, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x5f,
	0x54, 0x53, 0x10, 0x32, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x33, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x56, 0x50, 0x5f, 0x45, 0x4e,
	0x45, 0x4d, 0x59, 0x5f, 0x54, 0x52, 0x4f, 0x50, 0x48, 0x59, 0x10, 0x34, 0x12, 0x17, 0x0a, 0x13,
	0x54, 0x45, 0x41, 0x4d, 0x57, 0x41, 0x52, 0x56, 0x31, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x53, 0x43,
	0x4f, 0x52, 0x45, 0x10, 0x35, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x45, 0x41, 0x4d, 0x57, 0x41, 0x52,
	0x56, 0x31, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x36, 0x12, 0x13, 0x0a,
	0x0f, 0x54, 0x45, 0x41, 0x4d, 0x57, 0x41, 0x52, 0x56, 0x31, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0x37, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x45, 0x41, 0x4d, 0x57, 0x41, 0x52, 0x56, 0x31, 0x5f,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x38, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x45, 0x41, 0x4d, 0x57,
	0x41, 0x52, 0x56, 0x31, 0x5f, 0x4f, 0x54, 0x45, 0x41, 0x4d, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10,
	0x39, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f,
	0x54, 0x45, 0x41, 0x4d, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x3a, 0x12, 0x17, 0x0a, 0x13, 0x54,
	0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x52, 0x41,
	0x4e, 0x4b, 0x10, 0x3b, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x45, 0x41, 0x4d, 0x4c, 0x45, 0x41, 0x47,
	0x55, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x3c, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x45,
	0x41, 0x4d, 0x4c, 0x45, 0x41, 0x47, 0x55, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x3d, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x45, 0x41, 0x4d, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x5f,
	0x54, 0x45, 0x41, 0x4d, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x3e, 0x12, 0x16, 0x0a, 0x12, 0x54,
	0x45, 0x41, 0x4d, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x52, 0x41, 0x4e,
	0x4b, 0x10, 0x3f, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x45, 0x41, 0x4d, 0x43, 0x48, 0x41, 0x4d, 0x50,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x40, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x45, 0x41, 0x4d,
	0x43, 0x48, 0x41, 0x4d, 0x50, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x41, 0x12,
	0x15, 0x0a, 0x11, 0x54, 0x45, 0x41, 0x4d, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x5f, 0x4e, 0x4f, 0x45,
	0x4e, 0x54, 0x52, 0x59, 0x10, 0x42, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x45, 0x41, 0x4d, 0x43, 0x48,
	0x41, 0x4d, 0x50, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x43, 0x12, 0x18, 0x0a, 0x14, 0x54,
	0x45, 0x41, 0x4d, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x5f, 0x4f, 0x54, 0x45, 0x41, 0x4d, 0x53, 0x43,
	0x4f, 0x52, 0x45, 0x10, 0x44, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x45,
	0x41, 0x4d, 0x5f, 0x49, 0x44, 0x10, 0x45, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x43, 0x52, 0x55,
	0x49, 0x54, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x46, 0x12, 0x16, 0x0a,
	0x12, 0x52, 0x45, 0x43, 0x52, 0x55, 0x49, 0x54, 0x5f, 0x4c, 0x45, 0x47, 0x45, 0x4e, 0x44, 0x5f,
	0x43, 0x4e, 0x54, 0x10, 0x47, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x52, 0x41, 0x4c, 0x45, 0x5f,
	0x43, 0x4e, 0x54, 0x10, 0x48, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x52, 0x41, 0x4c, 0x45, 0x5f,
	0x43, 0x41, 0x50, 0x10, 0x49, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f, 0x52, 0x41, 0x4c, 0x45, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0x4a, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4f, 0x52, 0x41, 0x4c, 0x45,
	0x5f, 0x45, 0x58, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x4b, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x4f, 0x52,
	0x4b, 0x45, 0x52, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x4c, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x4f, 0x52,
	0x4b, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x10, 0x4d, 0x12, 0x15, 0x0a, 0x11,
	0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x55, 0x50, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x53,
	0x54, 0x10, 0x4e, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x55, 0x50, 0x5f,
	0x4d, 0x49, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x4f, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x4f, 0x52, 0x4b,
	0x45, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x50, 0x12, 0x18, 0x0a, 0x14,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x54, 0x52, 0x4f, 0x4f, 0x50, 0x5f, 0x4d,
	0x45, 0x44, 0x41, 0x4c, 0x10, 0x51, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f,
	0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x57, 0x4f, 0x4f, 0x44, 0x53, 0x10, 0x52, 0x12, 0x14, 0x0a, 0x10,
	0x47, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x5f, 0x57, 0x4f, 0x4f, 0x44,
	0x10, 0x53, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x5f, 0x42, 0x4f, 0x4e, 0x55,
	0x53, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x54, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x48, 0x41, 0x4d, 0x50,
	0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53,
	0x45, 0x54, 0x10, 0x55, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x5f, 0x4c, 0x41,
	0x53, 0x54, 0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x10, 0x56, 0x12, 0x1b, 0x0a, 0x17, 0x43,
	0x48, 0x41, 0x4d, 0x50, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x57, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x4d,
	0x50, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x58, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x5f, 0x57, 0x4f,
	0x4f, 0x44, 0x10, 0x59, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x52, 0x45, 0x4e, 0x41, 0x5f, 0x53, 0x54,
	0x41, 0x47, 0x45, 0x10, 0x5a, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x47, 0x45, 0x10, 0x5b, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45, 0x46, 0x45, 0x4e, 0x53, 0x45,
	0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x53, 0x10, 0x5c, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45,
	0x53, 0x54, 0x52, 0x4f, 0x59, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x43, 0x4f,
	0x52, 0x45, 0x10, 0x5d, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x42, 0x41, 0x54,
	0x54, 0x4c, 0x45, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x5e, 0x12, 0x1b, 0x0a, 0x17, 0x54,
	0x52, 0x4f, 0x4f, 0x50, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
	0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x5f, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x52, 0x4f, 0x4f,
	0x50, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x43,
	0x4f, 0x52, 0x45, 0x10, 0x60, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x53,
	0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x61, 0x12,
	0x16, 0x0a, 0x12, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f,
	0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x62, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x41, 0x54, 0x54, 0x4c,
	0x45, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x63, 0x12,
	0x16, 0x0a, 0x12, 0x49, 0x4e, 0x46, 0x5f, 0x57, 0x41, 0x52, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c,
	0x45, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x66, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x46, 0x5f, 0x57,
	0x41, 0x52, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x44, 0x41, 0x4d,
	0x41, 0x47, 0x45, 0x10, 0x67, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x46, 0x5f, 0x57, 0x41, 0x52,
	0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x44, 0x41,
	0x4d, 0x41, 0x47, 0x45, 0x10, 0x68, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x46, 0x5f, 0x57, 0x41,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x69,
	0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x46, 0x5f, 0x57, 0x41, 0x52, 0x5f, 0x52, 0x4f, 0x4f, 0x4d,
	0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x10, 0x6a, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x52, 0x4d, 0x59,
	0x5f, 0x48, 0x50, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x10, 0x6b, 0x12, 0x1c, 0x0a, 0x18, 0x43,
	0x48, 0x41, 0x4d, 0x50, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x5f, 0x50, 0x41, 0x43,
	0x4b, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x10, 0x6c, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x50, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x6d, 0x12, 0x15, 0x0a, 0x11, 0x41,
	0x44, 0x56, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x42, 0x50, 0x5f, 0x42, 0x4f, 0x55, 0x47, 0x48, 0x54,
	0x10, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x50, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f,
	0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x6f, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x50,
	0x5f, 0x41, 0x44, 0x56, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x10, 0x70, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x50, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43,
	0x55, 0x4c, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x71, 0x12, 0x12, 0x0a, 0x0e,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x10, 0x72,
	0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x10, 0x73,
	0x12, 0x16, 0x0a, 0x12, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x42, 0x4f, 0x58, 0x5f, 0x43, 0x4c, 0x41,
	0x49, 0x4d, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x74, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x49, 0x50, 0x5f,
	0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x5f, 0x54, 0x53, 0x10, 0x75, 0x12, 0x17, 0x0a, 0x13, 0x56,
	0x49, 0x50, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x43,
	0x4e, 0x54, 0x10, 0x76, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x49, 0x50, 0x5f, 0x44, 0x41, 0x49, 0x4c,
	0x59, 0x5f, 0x52, 0x57, 0x44, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x10, 0x77, 0x12, 0x18, 0x0a,
	0x14, 0x56, 0x49, 0x50, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x78, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x45, 0x41, 0x4d, 0x5f,
	0x45, 0x58, 0x50, 0x10, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4c, 0x56,
	0x10, 0x7a, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x42, 0x4f, 0x58, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x43, 0x4e, 0x54, 0x10, 0x7b, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x43, 0x55, 0x52, 0x5f, 0x4c, 0x56, 0x5f, 0x45,
	0x58, 0x50, 0x10, 0x7c, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4e, 0x45, 0x58,
	0x54, 0x5f, 0x4c, 0x56, 0x5f, 0x45, 0x58, 0x50, 0x10, 0x7d, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x45,
	0x41, 0x4d, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x7e, 0x12, 0x15,
	0x0a, 0x11, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x50, 0x47, 0x10, 0x7f, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x52,
	0x52, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x10,
	0x80, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x50, 0x56, 0x45, 0x5f, 0x4e, 0x4f, 0x57, 0x5f, 0x43, 0x48,
	0x41, 0x50, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x10, 0x82, 0x01, 0x12, 0x17, 0x0a,
	0x12, 0x50, 0x56, 0x45, 0x5f, 0x4e, 0x4f, 0x57, 0x5f, 0x43, 0x48, 0x41, 0x50, 0x54, 0x45, 0x52,
	0x5f, 0x49, 0x44, 0x10, 0x84, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x50, 0x56, 0x45, 0x5f, 0x4e, 0x45,
	0x58, 0x54, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x85, 0x01, 0x12, 0x1c,
	0x0a, 0x17, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x53, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x10, 0x86, 0x01, 0x12, 0x14, 0x0a, 0x0f,
	0x43, 0x48, 0x41, 0x4d, 0x50, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x10,
	0x87, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x4c, 0x55, 0x43, 0x4b, 0x59, 0x5f, 0x4d, 0x41, 0x58, 0x10,
	0x88, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x50, 0x56, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x50, 0x54, 0x45,
	0x52, 0x5f, 0x52, 0x57, 0x44, 0x10, 0x89, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x56, 0x45, 0x5f,
	0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x4c, 0x4f,
	0x43, 0x4b, 0x10, 0x8a, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x56, 0x45, 0x5f, 0x44, 0x41, 0x49,
	0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x45,
	0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x8b, 0x01, 0x12, 0x25, 0x0a, 0x20,
	0x50, 0x56, 0x45, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x57, 0x4f, 0x4f, 0x44, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x54, 0x41, 0x47,
	0x10, 0x8c, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x50, 0x56, 0x50, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f,
	0x41, 0x52, 0x45, 0x4e, 0x41, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x8e, 0x01, 0x12, 0x18,
	0x0a, 0x13, 0x49, 0x4e, 0x46, 0x5f, 0x57, 0x41, 0x52, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x45, 0x58,
	0x54, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x93, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x50, 0x56, 0x45, 0x5f,
	0x4e, 0x4f, 0x57, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x10, 0x94, 0x01, 0x2a, 0x9e, 0x07, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x56, 0x50,
	0x5f, 0x42, 0x50, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d,
	0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x56, 0x50, 0x5f, 0x42, 0x50, 0x5f, 0x41, 0x44, 0x56,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15,
	0x50, 0x56, 0x50, 0x5f, 0x54, 0x52, 0x4f, 0x50, 0x48, 0x59, 0x5f, 0x52, 0x4f, 0x41, 0x44, 0x5f,
	0x43, 0x4c, 0x41, 0x49, 0x4d, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x41, 0x59, 0x5f, 0x44, 0x45, 0x46, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x41, 0x59, 0x5f, 0x41,
	0x54, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x41,
	0x59, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x07, 0x12, 0x12,
	0x0a, 0x0e, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x52, 0x4d, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x44, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x44, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4c, 0x49,
	0x54, 0x45, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x0b, 0x12, 0x14,
	0x0a, 0x10, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x52, 0x41,
	0x43, 0x45, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x52,
	0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x55, 0x43, 0x4b, 0x59,
	0x5f, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13,
	0x4c, 0x55, 0x43, 0x4b, 0x59, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f,
	0x43, 0x4e, 0x54, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x4c, 0x4f, 0x50, 0x5f, 0x4f, 0x50,
	0x45, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x48, 0x4f, 0x50, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x11,
	0x12, 0x16, 0x0a, 0x12, 0x47, 0x52, 0x4f, 0x57, 0x54, 0x48, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x12, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x55, 0x53, 0x45,
	0x5f, 0x57, 0x49, 0x53, 0x48, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x13, 0x12, 0x11, 0x0a, 0x0d,
	0x48, 0x45, 0x52, 0x4f, 0x5f, 0x4c, 0x56, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x14, 0x12,
	0x14, 0x0a, 0x10, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x10, 0x15, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x4c, 0x41,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x16, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x47,
	0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x1a, 0x12, 0x14, 0x0a,
	0x10, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x53, 0x43, 0x52, 0x41, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x10, 0x1b, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x4d, 0x50, 0x5f, 0x52, 0x4f, 0x41,
	0x44, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x10, 0x1e, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x4f, 0x52,
	0x4b, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x1f, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x41,
	0x49, 0x4c, 0x59, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x10, 0x20, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x21, 0x12,
	0x16, 0x0a, 0x12, 0x54, 0x45, 0x41, 0x4d, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x22, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x45, 0x41, 0x4d, 0x5f,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x10, 0x23, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x56, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x24, 0x12, 0x18, 0x0a, 0x14,
	0x50, 0x56, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x49,
	0x4e, 0x44, 0x45, 0x58, 0x10, 0x25, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x56, 0x45, 0x5f, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x49, 0x44, 0x10,
	0x26, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x56, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x5f, 0x49, 0x53, 0x4c, 0x41, 0x4e, 0x44, 0x10, 0x27, 0x12, 0x16, 0x0a, 0x12,
	0x50, 0x56, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x43,
	0x42, 0x54, 0x10, 0x28, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x56, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43,
	0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x4c, 0x41, 0x59, 0x4f, 0x55, 0x54, 0x10, 0x29, 0x12,
	0x17, 0x0a, 0x13, 0x50, 0x56, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e,
	0x54, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x10, 0x2a, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x56, 0x45, 0x5f,
	0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x42, 0x44, 0x4c, 0x56, 0x10,
	0x2b, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x56, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x2c, 0x42, 0x26, 0x5a, 0x11,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0xaa, 0x02, 0x10, 0x57, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_response_proto_rawDescOnce sync.Once
	file_response_proto_rawDescData = file_response_proto_rawDesc
)

func file_response_proto_rawDescGZIP() []byte {
	file_response_proto_rawDescOnce.Do(func() {
		file_response_proto_rawDescData = protoimpl.X.CompressGZIP(file_response_proto_rawDescData)
	})
	return file_response_proto_rawDescData
}

var file_response_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_response_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_response_proto_goTypes = []interface{}{
	(CounterType)(0),        // 0: response.CounterType
	(StateType)(0),          // 1: response.StateType
	(*General)(nil),         // 2: response.General
	(*GeneralReward)(nil),   // 3: response.GeneralReward
	(*GeneralState)(nil),    // 4: response.GeneralState
	(*PerChange)(nil),       // 5: response.PerChange
	(*GeneralLayout)(nil),   // 6: response.GeneralLayout
	(*BdInformation)(nil),   // 7: response.BdInformation
	(*HeroInformation)(nil), // 8: response.HeroInformation
	(*SyncPos)(nil),         // 9: response.SyncPos
	(*StateDetail)(nil),     // 10: response.StateDetail
	nil,                     // 11: response.GeneralReward.BalanceEntry
	nil,                     // 12: response.GeneralReward.CounterEntry
	nil,                     // 13: response.GeneralState.CounterEntry
	nil,                     // 14: response.GeneralLayout.BalanceEntry
	nil,                     // 15: response.GeneralLayout.CounterEntry
	nil,                     // 16: response.SyncPos.NewPosEntry
	nil,                     // 17: response.StateDetail.StateEntry
}
var file_response_proto_depIdxs = []int32{
	5,  // 0: response.GeneralReward.changes:type_name -> response.PerChange
	11, // 1: response.GeneralReward.balance:type_name -> response.GeneralReward.BalanceEntry
	12, // 2: response.GeneralReward.counter:type_name -> response.GeneralReward.CounterEntry
	13, // 3: response.GeneralState.counter:type_name -> response.GeneralState.CounterEntry
	10, // 4: response.GeneralState.state:type_name -> response.StateDetail
	7,  // 5: response.GeneralLayout.bdInf:type_name -> response.BdInformation
	9,  // 6: response.GeneralLayout.changedPos:type_name -> response.SyncPos
	14, // 7: response.GeneralLayout.balance:type_name -> response.GeneralLayout.BalanceEntry
	8,  // 8: response.GeneralLayout.heroInf:type_name -> response.HeroInformation
	15, // 9: response.GeneralLayout.counter:type_name -> response.GeneralLayout.CounterEntry
	10, // 10: response.GeneralLayout.state:type_name -> response.StateDetail
	16, // 11: response.SyncPos.newPos:type_name -> response.SyncPos.NewPosEntry
	1,  // 12: response.StateDetail.type:type_name -> response.StateType
	17, // 13: response.StateDetail.state:type_name -> response.StateDetail.StateEntry
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_response_proto_init() }
func file_response_proto_init() {
	if File_response_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_response_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*General); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralLayout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BdInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeroInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncPos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_response_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_response_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_response_proto_goTypes,
		DependencyIndexes: file_response_proto_depIdxs,
		EnumInfos:         file_response_proto_enumTypes,
		MessageInfos:      file_response_proto_msgTypes,
	}.Build()
	File_response_proto = out.File
	file_response_proto_rawDesc = nil
	file_response_proto_goTypes = nil
	file_response_proto_depIdxs = nil
}
